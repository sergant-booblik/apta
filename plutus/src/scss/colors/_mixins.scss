@mixin use-component-color($hover: true) {
	@each $color, $tone in $colors {
		&--#{$color} {
			@include use-border-color($tone, $hover);
			@include use-text-color($tone, $hover)
		}

		&--#{$color}:not(&--outline) {
			@include use-bg-color($tone, $hover);
		}

		@apply transition-colors;
	}
}


@mixin use-bg-color($tone, $hover) {
	&, &.button {
		@apply bg-#{$tone}-#{map-get($theme, light)} dark:bg-#{$tone}-#{map-get($theme, dark)};
		@if($hover) {
			@apply hover:bg-#{$tone}-#{map-get($theme, light) + 100} hover:dark:bg-#{$tone}-#{map-get($theme, dark) - 100};
		}
	}
}

@mixin use-border-color($tone, $hover) {
	&, &.button {
		@apply border-#{$tone}-#{map-get($theme, light)} dark:border-#{$tone}-#{map-get($theme, dark)};
		@if($hover) {
			@apply hover:border-#{$tone}-#{map-get($theme, light) + 100} hover:dark:border-#{$tone}-#{map-get($theme, dark) - 100};
			@apply hover:bg-#{$tone}-#{map-get($theme, light) + 100} hover:dark:bg-#{$tone}-#{map-get($theme, dark) - 100};
		}
	}
}

@mixin use-text-color($tone, $hover) {
	&, &.button {
		@apply text-slate-#{map-get($text, dark)} dark:text-slate-#{map-get($text, light)};
	}
}
